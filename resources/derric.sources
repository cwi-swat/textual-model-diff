[<"gif/gif.derric", "fc43456", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock*]\n    [GraphicControlExtension? PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: 0..3 unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n  BlockSize: 11;\n  AppIdentifier: type string size 8;\n  AppAuthCode: size 3;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "2c28d2a", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock*]\n    [GraphicControlExtension? PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n  BlockSize: 11;\n  AppIdentifier: type string size 8;\n  AppAuthCode: size 3;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "a3cb744", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock*]\n    [GraphicControlExtension? PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [GraphicControlExtension? CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n  BlockSize: 11;\n  AppIdentifier: type string size 8;\n  AppAuthCode: size 3;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "7cd6500", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  GraphicControlExtension?\n  (\n    [TableBasedImage CompressedDataBlock*]\n    [PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n  BlockSize: 11;\n  AppIdentifier: type string size 8;\n  AppAuthCode: size 3;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "cd76b13", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  GraphicControlExtension?\n  (\n    [TableBasedImage CompressedDataBlock*]\n    [PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "46379ec", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  GraphicControlExtension?\n  (\n    [TableBasedImage CompressedDataBlock*]\n    [PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [GraphicControlExtension? CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "d09ac40", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  GraphicControlExtension?\n  (\n    [TableBasedImage CompressedDataBlock*]\n    [PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [GraphicControlExtension? CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer?\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "9b3f919", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  GraphicControlExtension?\n  (\n    [TableBasedImage CompressedDataBlock*]\n    [PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock?\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [GraphicControlExtension? CommentExtension DataBlock* ZeroBlock]\n  )*\n  Trailer?\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"gif/gif.derric", "872cd67", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat gif\nextension gif\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  (Header87a Header89a)\n  LogicalScreenDesc\n  GraphicControlExtension?\n  (\n    [TableBasedImage CompressedDataBlock*]\n    [PlainTextExtension DataBlock*]\n    [ApplicationExtension DataBlock*]\n    [CommentExtension DataBlock*]\n  )\n  ZeroBlock?\n  (\n    [GraphicControlExtension? TableBasedImage CompressedDataBlock* ZeroBlock]\n    [GraphicControlExtension? PlainTextExtension DataBlock* ZeroBlock]\n    [ApplicationExtension DataBlock* ZeroBlock]\n    [GraphicControlExtension? CommentExtension DataBlock* ZeroBlock]\n  )*\n  [CommentExtension DataBlock]?\n  Trailer?\n\nstructures\nHeader87a {\n  Signature: \"GIF\";\n  Version: \"87a\";\n}\n\nHeader89a {\n  Signature: \"GIF\";\n  Version: \"89a\";\n}\n\nLogicalScreenDesc {\n  LSWidth: size 2;\n  LSHeight: size 2;\n  GCTFlag: unit bit;\n  ColorResolution: unit bit size 3;\n  SortFlag: unit bit;\n  GCTSize: unit bit size 3;\n  BGColorIndex;\n  PixelAspectRatio;\n  GCT: size GCTFlag*(3*(2^(GCTSize+1)));\n}\n\nGraphicControlExtension {\n  ExtensionIntroducer: 0x21;\n  GraphicControlLabel: 0xf9;\n  BlockSize: 4;\n  Reserved: unit bit size 3;\n  DisposalMethod: unit bit size 3;\n  UserInputFlag: unit bit;\n  TransparancyFlag: unit bit;\n  DelayTime: size 2;\n  TransparancyIndex;\n  BlockTerminator: 0;\n}\n\nTableBasedImage {\n  Separator: 0x2c;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  LCTFlag: unit bit;\n  InterlaceFlag: unit bit;\n  SortFlag: unit bit;\n  Reserved: unit bit size 2;\n  LCTSize: unit bit size 3;\n  LCT: size LCTFlag*(3*(2^(LCTSize+1)));\n  LZWMinimumCodeSize;\n}\n\nPlainTextExtension {\n  ExtensionIntroducer: 0x21;\n  PlainTextLabel: 1;\n  BlockSize: 12;\n  Left: size 2;\n  Top: size 2;\n  Width: size 2;\n  Height: size 2;\n  CellWidth;\n  CellHeight;\n  FGColorIndex;\n  BGColorIndex;\n}\n\nApplicationExtension {\n  ExtensionIntroducer: 0x21;\n  ExtensionLabel: 0xff;\n}\n\nCommentExtension {\n  ExtensionIntroducer: 0x21;\n  CommentLabel: 0xfe;\n}\n\nDataBlock {\n  Length: 1..255;\n  Data: size Length;\n}\n\nCompressedDataBlock = DataBlock {\n  Data: lzw(packing=\"lsb\",\n            codesize=\"variable\",\n            startsize=TableBasedImage.LZWMinimumCodeSize)\n        size Length;\n}\n\nZeroBlock {\n  Length: 0;\n}\n\nTrailer {\n  marker: 0x3b;\n}">,
<"png/png.derric", "d71a7c4", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt)*\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}">,
<"png/png.derric", "3922516", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt)*\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}">,
<"png/png.derric", "f97370b", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt)*\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}">,
<"png/png.derric", "3780274", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt)*\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}">,
<"png/png.derric", "cc7f2f3", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt)*\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}">,
<"png/png.derric", "7c32673", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt)*\n  bBPn?\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}">,
<"png/png.derric", "454152a", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp)*\n  bBPn?\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}">,
<"png/png.derric", "bdbf985", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa)*\n  bBPn?\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}">,
<"png/png.derric", "3caa428", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}">,
<"png/png.derric", "6b0cca9", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}">,
<"png/png.derric", "ec33a53", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}">,
<"png/png.derric", "fddce35", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}">,
<"png/png.derric", "20b63f0", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}">,
<"png/png.derric", "b8cd1d9", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG tpNg)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}\n\ntpNg = Chunk {\n  chunktype: \"tpNg\";\n}">,
<"png/png.derric", "f096d6c", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG tpNg)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg cmPP)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}\n\ntpNg = Chunk {\n  chunktype: \"tpNg\";\n}\n\ncmPP = Chunk {\n  chunktype: \"cmPP\";\n}">,
<"png/png.derric", "cff3430", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG tpNg acTL fcTL)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg cmPP)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}\n\ntpNg = Chunk {\n  chunktype: \"tpNg\";\n}\n\ncmPP = Chunk {\n  chunktype: \"cmPP\";\n}\n\nacTL = Chunk {\n  chunktype: \"acTL\";\n}\n\nfcTL = Chunk {\n  chunktype: \"fcTL\";\n}">,
<"png/png.derric", "a691cde", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG tpNg acTL fcTL vpAg)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg cmPP)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}\n\ntpNg = Chunk {\n  chunktype: \"tpNg\";\n}\n\ncmPP = Chunk {\n  chunktype: \"cmPP\";\n}\n\nacTL = Chunk {\n  chunktype: \"acTL\";\n}\n\nfcTL = Chunk {\n  chunktype: \"fcTL\";\n}">,
<"png/png.derric", "bdc85e9", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG tpNg acTL fcTL vpAg pRVW)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg cmPP)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}\n\ntpNg = Chunk {\n  chunktype: \"tpNg\";\n}\n\ncmPP = Chunk {\n  chunktype: \"cmPP\";\n}\n\nacTL = Chunk {\n  chunktype: \"acTL\";\n}\n\nfcTL = Chunk {\n  chunktype: \"fcTL\";\n}\n\npRVW = Chunk {\n  chunktype: \"pRVW\";\n}">,
<"png/png.derric", "399fb54", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat png\nextension png\n\nstrings ascii\nsign false\nunit byte\nsize 1\ntype integer\nendian big\n\nsequence\n  Signature\n  IHDR\n  (bKGD cHRM gAMA iCCP sBIT sRGB pHYs sPLT tIME iTXt tEXt zTXt prVW mkBF mkTS mkBS mkBT oFFs tpNG tpNg acTL fcTL vpAg pRVW cmOD cpIp meTa)*\n  PLTE?\n  (bKGD hIST tRNS pHYs sPLT tIME iTXt tEXt zTXt vpAg oFFs gIFg cmPP)*\n  IDAT\n  IDAT*\n  (tIME iTXt tEXt zTXt cmOD cpIp meTa eXIF)*\n  bBPn?\n  IEND?\n\nstructures\nSignature { /* Signature, header for all PNG files. */\n  marker: 137, 80, 78, 71, 13, 10, 26, 10;\n}\n\nChunk { /* Base class for all PNG data structures, except Signature. */\n  length: lengthOf(chunkdata) size 4;\n  chunktype: size 4;\n  chunkdata: size length;\n  crc: checksum(algorithm=\"crc32-ieee\",\n                init=\"allone\",\n                start=\"lsb\",\n                end=\"invert\",\n                store=\"msbfirst\",\n                fields=chunktype+chunkdata)\n       size 4;\n}\n\nIHDR = Chunk { /* Header, describes general image metadata. */\n  chunktype: \"IHDR\";\n  chunkdata: {\n    width: !0 size 4;\n    height: !0 size 4;\n    bitdepth: 1|2|4|8|16;\n    colourtype: 0|2|3|4|6;\n    compression: 0;\n    filter: 0;\n    interlace: 0|1;\n  }\n}\n\nIDAT = Chunk { /* Data, contains the actual (compressed) image data. */\n  chunktype: \"IDAT\";\n  chunkdata: compressed(algorithm=\"deflate\",\n                        layout=\"zlib\")\n             size length;\n}\n\nIEND { /* End, footer. */\n  length: 0 size 4;\n  chunktype: \"IEND\";\n  crc: 0xAE, 0x42, 0x60, 0x82; /* Since length is 0, this is always the crc of an empty buffer. */\n}\n\nPLTE = Chunk {\n  chunktype: \"PLTE\";\n}\n\ncHRM = Chunk {\n  chunktype: \"cHRM\";\n}\n\ngAMA = Chunk {\n  chunktype: \"gAMA\";\n}\n\niCCP = Chunk {\n  chunktype: \"iCCP\";\n}\n\nsBIT = Chunk {\n  chunktype: \"sBIT\";\n}\n\nsRGB = Chunk {\n  chunktype: \"sRGB\";\n}\n\nbKGD = Chunk {\n  chunktype: \"bKGD\";\n}\n\nhIST = Chunk {\n  chunktype: \"hIST\";\n}\n\ntRNS = Chunk {\n  chunktype: \"tRNS\";\n}\n\npHYs = Chunk {\n  chunktype: \"pHYs\";\n}\n\nsPLT = Chunk {\n  chunktype: \"sPLT\";\n}\n\ntIME = Chunk {\n  chunktype: \"tIME\";\n}\n\niTXt = Chunk {\n  chunktype: \"iTXt\";\n}\n\ntEXt = Chunk {\n  chunktype: \"tEXt\";\n}\n\nzTXt = Chunk {\n  chunktype: \"zTXt\";\n}\n\nprVW = Chunk {\n  chunktype: \"prVW\";\n}\n\nmkBF = Chunk {\n  chunktype: \"mkBF\";\n}\n\nmkTS = Chunk {\n  chunktype: \"mkTS\";\n}\n\nmkBS = Chunk {\n  chunktype: \"mkBS\";\n}\n\nmkBT = Chunk {\n  chunktype: \"mkBT\";\n}\n\nvpAg = Chunk {\n  chunktype: \"vpAg\";\n}\n\noFFs = Chunk {\n  chunktype: \"oFFs\";\n}\n\ntpNG = Chunk {\n  chunktype: \"tpNG\";\n}\n\nbBPn = Chunk {\n  chunktype: \"bBPn\";\n}\n\ncmOD = Chunk {\n  chunktype: \"cmOD\";\n}\n\ncpIp = Chunk {\n  chunktype: \"cpIp\";\n}\n\nmeTa = Chunk {\n  chunktype: \"meTa\";\n}\n\neXIF = Chunk {\n  chunktype: \"eXIF\";\n}\n\ngIFg = Chunk {\n  chunktype: \"gIFg\";\n}\n\ntpNg = Chunk {\n  chunktype: \"tpNg\";\n}\n\ncmPP = Chunk {\n  chunktype: \"cmPP\";\n}\n\nacTL = Chunk {\n  chunktype: \"acTL\";\n}\n\nfcTL = Chunk {\n  chunktype: \"fcTL\";\n}\n\npRVW = Chunk {\n  chunktype: \"pRVW\";\n}">,
<"jpeg/jpeg.derric", "590a396", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?])\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "c1b3578", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa)\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "6ebbad4", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa APP0JFXX)\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "ef0329b", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa APP0JFXX APP14Adobe)\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "d679520", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "fce26b3", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "bbe0bf1", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  (DQT DHT DRI SOF0 SOF2 APPX COM)*\n  SOS\n  (SOS DQT DHT DRI SOF0 SOF2 APPX COM)*\n  EOI?\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "13f1e56", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  ([APP0JFIF APP0JFXX?] [APP1 APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  (DQT DHT DRI SOF0 SOF1 SOF2 APPX COM)*\n  SOS\n  (SOS DQT DHT DRI SOF0 SOF1 SOF2 APPX COM)*\n  EOI?\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nAPP0JFIF {\n  marker: 0xFF, 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xFF, 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  marker: 0xFF;\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF1 = Segment { identifier: 0xC1; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xFF, 0xD9;\n}">,
<"jpeg/jpeg.derric", "6a8b0d7", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  PADDING*\n  ([APP0JFIF PADDING* APP0JFXX?] [APP1 PADDING* APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  PADDING*\n  ([DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  SOS\n  (SOS [DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  PADDING*\n  EOI?\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nPADDING {\n  padding: 0xFF;\n}\n\nAPP0JFIF {\n  marker: 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF1 = Segment { identifier: 0xC1; }\nSOF2 = Segment { identifier: 0xC2; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xD9;\n}\n">,
<"jpeg/jpeg.derric", "acfab2d", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  PADDING*\n  ([APP0JFIF PADDING* APP0JFXX?] [APP1 PADDING* APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  PADDING*\n  ([DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  SOS\n  (SOS [DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  PADDING*\n  EOI?\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nPADDING {\n  padding: 0xFF;\n}\n\nAPP0JFIF {\n  marker: 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  /*marker: 0xFF;*/\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF1 = Segment { identifier: 0xC1; }\nSOF2 = Segment { identifier: 0xC2; }\nSOF3 = Segment { identifier: 0xC3; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nEOI {\n  marker: 0xD9;\n}">,
<"jpeg/jpeg.derric", "712e583", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  PADDING*\n  ([APP0JFIF PADDING* APP0JFXX?] [APP1 PADDING* APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  PADDING*\n  ([DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COMElanGmk PADDING*])*\n  PADDING*\n  ([DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  SOS\n  (SOS [DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  PADDING*\n  EOI?\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nPADDING {\n  padding: 0xFF;\n}\n\nAPP0JFIF {\n  marker: 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  /*marker: 0xFF;*/\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF1 = Segment { identifier: 0xC1; }\nSOF2 = Segment { identifier: 0xC2; }\nSOF3 = Segment { identifier: 0xC3; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nCOMElanGmk = COM {\n  data: \"SN 165-20106-02, Elan Gmk\", 0x0D, 0x0A, \"Internal use only\", 0x0D, 0x0A, \"Not for resale\", 0;\n}\n\nEOI {\n  marker: 0xD9;\n}">,
<"jpeg/jpeg.derric", "afb17f7", "/* Copyright 2011-2012 Netherlands Forensic Institute and\n                       Centrum Wiskunde & Informatica\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\nformat jpeg\nextension jpeg jpg jfif\n\nunit byte\nsize 1\nsign false\ntype integer\nendian big\nstrings ascii\n\nsequence\n  SOI\n  PADDING*\n  COMASC?\n  PADDING*\n  ([APP0JFIF PADDING* APP0JFXX?] [APP1 PADDING* APP2?] APP0Picasa APP0JFXX APP14Adobe APP13Photoshop)?\n  PADDING*\n  ([DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COMElanGmk PADDING*])*\n  PADDING*\n  ([DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  SOS\n  (SOS [DQT PADDING*] [DHT PADDING*] [DRI PADDING*] [SOF0 PADDING*] [SOF1 PADDING*] [SOF2 PADDING*] [SOF3 PADDING*] [APPX PADDING*] [COM PADDING*])*\n  PADDING*\n  EOI?\n\nstructures\nSOI {\n  marker: 0xFF, 0xD8;\n}\n\nPADDING {\n  padding: 0xFF;\n}\n\nAPP0JFIF {\n  marker: 0xE0;\n  length: lengthOf(rgb) + (offset(rgb) - offset(length)) size 2;\n  identifier: \"JFIF\", 0;\n  version: size 2;\n  units: 0 | 1 | 2;\n  xdensity: size 2;\n  ydensity: size 2;\n  xthumbnail;\n  ythumbnail;\n  rgb: size xthumbnail * (ythumbnail * 3);\n}\n\nAPP0JFXX {\n  marker: 0xE0;\n  length: size 2;\n  identifier: \"JFXX\", 0;\n  thumbnailformat: 0x10 | 0x11 | 0x13;\n  thumbnaildata: size length-(offset(thumbnaildata)-offset(length));\n}\n\nAPP0Picasa = Segment {\n  identifier: 0xE0;\n  data: \"Picasa\";\n}\n\nAPP14Adobe = Segment {\n  identifier: 0xEE;\n  data: {\n    text: \"Adobe\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nAPP13Photoshop = Segment {\n  identifier: 0xED;\n  data: {\n    text: \"Photoshop 3.0\", 0;\n    rest: size (length-lengthOf(length))-lengthOf(text);\n  }\n}\n\nSegment {\n  /*marker: 0xFF;*/\n  identifier: 0xD0..0xD7 | 0xDB..0xDC | 0xDF | 0xF0..0xFD;\n  length: size 2;\n  data: size length-(lengthOf(length));\n}\n\nSOS = Segment {\n  identifier: 0xDA;\n  compressedData: jpegdata(huffmantable=DHT.data,\n                           quantizationtable=DQT.data,\n                           terminator=0xFFD9+0xFFC4+0xFFDA,\n                           terminatorsize=16,\n                           includeterminator=\"false\");\n}\n\nAPP1 = Segment { identifier: 0xE1; }\nAPP2 = Segment { identifier: 0xE2; }\nDQT = Segment { identifier: 0xDB; }\nDHT = Segment { identifier: 0xC4; }\nDRI = Segment { identifier: 0xDD; }\nSOF0 = Segment { identifier: 0xC0; }\nSOF1 = Segment { identifier: 0xC1; }\nSOF2 = Segment { identifier: 0xC2; }\nSOF3 = Segment { identifier: 0xC3; }\nAPPX = Segment { identifier: 0xE0..0xEF; }\nCOM = Segment { identifier: 0xFE; }\n\nCOMElanGmk = COM {\n  data: \"SN 165-20106-02, Elan Gmk\", 0x0D, 0x0A, \"Internal use only\", 0x0D, 0x0A, \"Not for resale\", 0;\n}\n\nCOMASC = COM {\n  length: lengthOf(data) size 2;\n  data: \"Created by AccuSoft Corp.\", 0;\n}\n\nEOI {\n  marker: 0xD9;\n}">]